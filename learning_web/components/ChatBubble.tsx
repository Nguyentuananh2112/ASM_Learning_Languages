"use client";
// Import c√°c hook c·∫ßn thi·∫øt t·ª´ React
import React, { useRef, useState } from "react";

// ƒê·ªãnh nghƒ©a component ChatBubble (bong b√≥ng chat n·ªïi tr√™n m√†n h√¨nh)
export default function ChatBubble() {
  // Tr·∫°ng th√°i ki·ªÉm so√°t vi·ªác k√©o bong b√≥ng
  const [isDragging, setIsDragging] = useState(false);
  // Tr·∫°ng th√°i v·ªã tr√≠ c·ªßa bong b√≥ng tr√™n m√†n h√¨nh (t·ªça ƒë·ªô x, y)
  const [position, setPosition] = useState({ x: 30, y: 80 });
  // Tr·∫°ng th√°i hi·ªÉn th·ªã/·∫©n c·ª≠a s·ªï chat
  const [showChat, setShowChat] = useState(false);
  // Ref t·ªõi DOM element c·ªßa bong b√≥ng
  const bubbleRef = useRef<HTMLDivElement>(null);
  // Ref l∆∞u offset khi b·∫Øt ƒë·∫ßu k√©o
  const offset = useRef({ x: 0, y: 0 });
  // K√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh c·ªßa bong b√≥ng (px)
  const BUBBLE_SIZE = 64; // px, t∆∞∆°ng ·ª©ng w-16 h-16

  // X·ª≠ l√Ω khi b·∫Øt ƒë·∫ßu k√©o bong b√≥ng
  const onMouseDown = (e: React.MouseEvent) => {
    setIsDragging(true);
    offset.current = {
      x: e.clientX - position.x,
      y: e.clientY - position.y,
    };
    document.body.style.userSelect = "none";
  };

  // X·ª≠ l√Ω khi di chuy·ªÉn chu·ªôt (k√©o bong b√≥ng)
  const onMouseMove = (e: MouseEvent) => {
    if (!isDragging) return;
    // T√≠nh to√°n v·ªã tr√≠ m·ªõi, gi·ªõi h·∫°n trong viewport
    const maxX = window.innerWidth - BUBBLE_SIZE - 10; // 10px padding
    const maxY = window.innerHeight - BUBBLE_SIZE - 10;
    let newX = e.clientX - offset.current.x;
    let newY = e.clientY - offset.current.y;
    newX = Math.max(10, Math.min(newX, maxX));
    newY = Math.max(10, Math.min(newY, maxY));
    setPosition({ x: newX, y: newY });
  };

  // X·ª≠ l√Ω khi th·∫£ chu·ªôt (k·∫øt th√∫c k√©o)
  const onMouseUp = () => {
    setIsDragging(false);
    document.body.style.userSelect = "";
  };

  // L·∫Øng nghe s·ª± ki·ªán k√©o/th·∫£ chu·ªôt ƒë·ªÉ di chuy·ªÉn bong b√≥ng
  React.useEffect(() => {
    if (isDragging) {
      window.addEventListener("mousemove", onMouseMove);
      window.addEventListener("mouseup", onMouseUp);
    } else {
      window.removeEventListener("mousemove", onMouseMove);
      window.removeEventListener("mouseup", onMouseUp);
    }
    return () => {
      window.removeEventListener("mousemove", onMouseMove);
      window.removeEventListener("mouseup", onMouseUp);
    };
    // eslint-disable-next-line
  }, [isDragging]);

  // N·∫øu resize c·ª≠a s·ªï, ƒë·∫£m b·∫£o bong b√≥ng kh√¥ng b·ªã m·∫•t kh·ªèi m√†n h√¨nh
  React.useEffect(() => {
    const handleResize = () => {
      const maxX = window.innerWidth - BUBBLE_SIZE - 10;
      const maxY = window.innerHeight - BUBBLE_SIZE - 10;
      setPosition(pos => ({
        x: Math.max(10, Math.min(pos.x, maxX)),
        y: Math.max(10, Math.min(pos.y, maxY)),
      }));
    };
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  // Double click ƒë·ªÉ m·ªü chat, single click ƒë·ªÉ ƒë√≥ng chat
  const handleBubbleClick = (e: React.MouseEvent) => {
    if (showChat && !isDragging) setShowChat(false);
  };
  const handleBubbleDoubleClick = (e: React.MouseEvent) => {
    if (!showChat) setShowChat(true);
  };

  // T·ªëi ∆∞u hi·ªáu ·ª©ng: khi ƒëang k√©o th√¨ kh√¥ng transition v·ªã tr√≠, khi th·∫£ th√¨ c√≥
  const bubbleTransition = isDragging
    ? "box-shadow 0.1s, transform 0.1s"
    : "box-shadow 0.3s, transform 0.3s, left 0.3s, top 0.3s";
  const chatTransition = isDragging
    ? "none"
    : "left 0.3s, top 0.3s";

  return (
    <>
      {/* Bong b√≥ng chat n·ªïi, c√≥ th·ªÉ k√©o th·∫£, double click ƒë·ªÉ m·ªü chat, click ƒë·ªÉ ƒë√≥ng */}
      <div
        ref={bubbleRef}
        onMouseDown={onMouseDown}
        onClick={handleBubbleClick}
        onDoubleClick={handleBubbleDoubleClick}
        style={{
          position: "fixed",
          left: position.x,
          top: position.y,
          zIndex: 50,
          cursor: isDragging ? "grabbing" : "grab",
          transition: bubbleTransition,
          boxShadow: isDragging
            ? "0 0 0 6px #5ba5fa55, 0 8px 32px 0 #5ba5fa77"
            : "0 4px 24px 0 #5ba5fa55",
          transform: isDragging ? "scale(1.08)" : "scale(1)",
        }}
        className="w-16 h-16 bg-[#5ba5fa] rounded-full flex items-center justify-center text-white text-3xl font-bold select-none shadow-lg hover:shadow-2xl border-4 border-white"
        title={showChat ? "Click to close chat" : "Double click to open chat"}
      >
        {/* Icon chat */}
        üí¨
      </div>
      {/* C·ª≠a s·ªï chat, ch·ªâ hi·ªÉn th·ªã khi showChat = true */}
      {showChat && (
        <div
          style={{
            position: "fixed",
            left: position.x + 80,
            top: position.y,
            zIndex: 51,
            width: 320,
            height: 420,
            transition: chatTransition,
          }}
          className="bg-white rounded-2xl shadow-2xl border border-blue-200 flex flex-col overflow-hidden animate-fade-in"
        >
          {/* Header c·ªßa c·ª≠a s·ªï chat */}
          <div className="bg-[#5ba5fa] text-white px-4 py-2 font-bold flex items-center justify-between">
            Chat
            <button
              className="text-white text-xl font-bold hover:text-red-200"
              onClick={() => setShowChat(false)}
            >
              √ó
            </button>
          </div>
          {/* N·ªôi dung chat (hi·ªán t·∫°i ch·ªâ l√† placeholder) */}
          <div className="flex-1 p-4 text-neutral-500 flex items-center justify-center">
            Chatbot coming soon...
          </div>
        </div>
      )}
    </>
  );
} 
